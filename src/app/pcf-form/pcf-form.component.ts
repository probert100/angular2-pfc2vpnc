import {Component, OnInit, Output, EventEmitter, Inject} from '@angular/core';
import {FileUploader, FileItem} from 'ng2-file-upload';
import {PcfService} from "../pcf.service";



@Component({
  selector: 'app-pcf-form',
  templateUrl: './pcf-form.component.html',
  styleUrls: ['./pcf-form.component.css']
})
export class PcfFormComponent implements OnInit {

  @Output() valueUpdated = new EventEmitter();
  public uploader:FileUploader;
  public hasBaseDropZoneOver:boolean = false;
  public showMessage:boolean = false;
  public vpcFormat:string;
  private defaultResponse:string = `## generated by pcf2vpnc

## To add your username and password,
## use the following lines:
# Xauth username <your username>
# Xauth password <your password>`;
  private errorConverting: boolean = false;

  public message = {
    type: <string> 'success',
    message:<string> 'Success! Your pcf file was Decryptd.',
    show:<boolean> false

  };
  public decodedPassword: string;




  constructor(private pcfService: PcfService, @Inject('url') private backEndUrl) {
    this.uploader =  new FileUploader({url: backEndUrl});
    this.uploader.onSuccessItem = (fileItem, response:string, code:number) => {
      //console.log("code: "+code+" response:"+response);
      if(code == 200){
        if(response.match(this.defaultResponse)){
          this.errorConverting = true;
          this.message.type = 'warning';
          this.message.message='Your file was uploaded but conversion was not successful.';
        }
        else{
          this.vpcFormat = response;
        }
        this.message.message='Success! Your pcf file was Decryptd.';
        this.message.type = 'success';
        this.message.show = true;
        this.uploader.queue[0].remove();
      }
    };




    this.uploader.onAfterAddingFile = (fileItem:FileItem) => {
      console.log(`size: ${fileItem.file.size}  type: ${fileItem.file.type}`);
      if(fileItem.file.size > 2000){
        this.message.type = 'warning';
        this.message.message='Your file is too large.';
        this.message.show = true;
        this.uploader.clearQueue();
      }

      if(this.uploader.queue.length > 1)
         this.uploader.queue[0].remove();

    };


  }

  closeAlert(){
    this.message.show = false;
  }

  onClick(value:string){
    console.log(`value ${value}`);
    this.message.show = false;
    if(!value || value.length < 5){
      this.message.type = 'warning';
      this.message.message='Group password is too short..';
      this.message.show = true;
    } else{
      this.pcfService.postPassword(value).subscribe(
        res  => this.setDecodedPassowrd(res),
        error => this.setDecodedPasswordFailed(error) ); //this.errorMessage = <any>error);
    }


  }

  setDecodedPassowrd(password:string){
    console.log(`decodedPassword: ${password}`,password);
    if(!password || password.length == 0){
      this.message.type = 'warning';
      this.message.message='Group password could  not be decoded..';
      this.message.show = true;
    }else
      this.decodedPassword = password;
  }

  setDecodedPasswordFailed(error:any){
    console.error(`res: ${error}`,error);
    this.message.type = 'warning';
    this.message.message='Error decoding group password.';
    this.message.show = true;
  }

  ngOnInit() {
  }



  public fileOverBase(e:any):void {
    this.hasBaseDropZoneOver = e;


  }


}
